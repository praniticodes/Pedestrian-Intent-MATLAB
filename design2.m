function [allData, scenario, sensors] = design()
%design - Returns sensor detections
%    allData = design returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = design optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 24.2 (R2024b) and Automated Driving Toolbox 24.2 (R2024b).
% Generated on: 05-Jul-2025 14:05:35

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

% Add sensors to scenario
addSensors(scenario, sensors, egoVehicle.ActorID);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
[scenario, egoVehicle] = createDrivingScenario;

while running

    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        if ~isa(sensor,'insSensor')
            poses = targetPoses(scenario,sensor.SensorIndex);
        end
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            if isa(sensor,'ultrasonicDetectionGenerator')
                [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
                numObjects = length(objectDets);
            else
                [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            end
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            poses = actorPoses(scenario);
[ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);

            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
    updatePlot(chPlot);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-90 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{5} = lidarPointCloudGenerator('SensorIndex', 5, ...
    'SensorLocation', [0.95 0], ...
    'ActorProfiles', profiles);
sensors{6} = lidarPointCloudGenerator('SensorIndex', 6, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'AzimuthLimits', [-10 10], ...
    'ActorProfiles', profiles);
sensors{7} = drivingRadarDataGenerator('SensorIndex', 7, ...
    'MountingLocation', [-0.939 0.018 0.2], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{8} = ultrasonicDetectionGenerator('SensorIndex', 8, ...
    'MountingLocation', [2.8 0.9 0.2], ...
    'MountingAngles', [90 0 0], ...
    'Profiles', profiles);
sensors{9} = ultrasonicDetectionGenerator('SensorIndex', 9, ...
    'MountingLocation', [2.8 -0.9 0.2], ...
    'MountingAngles', [-90 0 0], ...
    'Profiles', profiles);
sensors{10} = ultrasonicDetectionGenerator('SensorIndex', 10, ...
    'MountingLocation', [0 0.9 0.2], ...
    'MountingAngles', [90 0 0], ...
    'Profiles', profiles);
sensors{11} = ultrasonicDetectionGenerator('SensorIndex', 11, ...
    'MountingLocation', [0 -0.9 0.2], ...
    'MountingAngles', [-90 0 0], ...
    'Profiles', profiles);
numSensors = 11;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [36.14 -10.48 0;
    40.87 -3.66 0;
    41 6.39 0;
    32.09 13.69 0;
    17.84 13.62 0;
    11.3 4.64 0;
    11.23 -4.14 0;
    16.43 -10.96 0;
    36.14 -10.48 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Width', 4, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [36.9 -10 0;
    119.3 -10.6 0];
laneSpecification = lanespec(2, 'Width', 4.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [114.2 -13.6 0;
    114.2 66.4 0];
laneSpecification = lanespec(2, 'Width', 4.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

roadCenters = [119.4 67 0;
    -29.3 65.4 0];
laneSpecification = lanespec(2, 'Width', 4.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road3');

roadCenters = [-28.9 70.3 0;
    -28.1 -63.5 0];
laneSpecification = lanespec(2, 'Width', 4.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road4');

roadCenters = [-32.7 -63.1 0;
    87 -62.5 0];
laneSpecification = lanespec(2, 'Width', 4.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road5');

roadCenters = [87.1 -67.8 0;
    87.1 -9.8 0];
laneSpecification = lanespec(2, 'Width', 4.925);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road6');

roadCenters = [114.4 36.8 0;
    11.7 35.2 0];
road(scenario, roadCenters, 'Name', 'Road7');

roadCenters = [11.9 38.4 0;
    11.4 5 0];
road(scenario, roadCenters, 'Name', 'Road8');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [24.4 -13.8 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Car');
waypoints = [24.74 -13.34 0;
    30.74 -13.04 0;
    36.14 -10.34 0;
    48.3 -9.7 0;
    55.5 -9.9 0;
    65.4 -11.2 0;
    74.7 -10.2 0;
    81.1 -8.2 0;
    87.54 -7.73999999999999 0;
    96.84 -9.94 0;
    110.94 -9.94 0;
    115.24 -10.94 0;
    117.84 -7.73999999999999 0;
    114.74 -1.33999999999999 0;
    114.64 21.36 0;
    113.14 25.36 0;
    115.53 33.26 0.01;
    114.74 37.16 0;
    109.24 67.16 0;
    104.74 67.16 0;
    97.04 69.16 0;
    88.94 67.56 0;
    69.74 66.96 0;
    53.44 67.16 0;
    45.04 65.86 0;
    35.24 67.06 0;
    15.14 67.16 0;
    -1.05999999999999 66.86 0;
    -8.85999999999999 68.36 0;
    -12.86 65.66 0;
    -25.16 68.36 0;
    -29.06 64.26 0;
    -28.96 7.26 0;
    -30.16 2.76 0;
    -28.86 -0.839999999999995 0;
    -28.06 -39.24 0;
    -27.98 -43.87 0.01;
    -29.86 -48.59 0.01;
    -27.9 -53.97 0.01;
    -26.16 -58.74 0;
    1.37 -62.46 0.01;
    20.15 -62.15 0.01;
    22.5 -59.8 0.01;
    25.66 -62.15 0.01;
    46.53 -62 0.01;
    69.04 -61.34 0;
    78.94 -65.14 0;
    82.84 -61.94 0;
    84.84 -60.24 0;
    87.64 -32.94 0;
    88.04 -14.24 0;
    89.94 -7.73999999999999 0;
    85.74 -6.44 0;
    79.84 -6.83999999999999 0;
    75.44 -9.44 0;
    68.24 -11.24 0;
    62.64 -11.24 0;
    57.14 -8.94 0;
    47.44 -9.44 0;
    41.24 -6.83999999999999 0;
    41.04 -3.14 0;
    42.04 -1.04 0;
    40.44 1.46 0;
    41.74 5.66000000000001 0;
    39.14 10.16 0;
    36.54 10.66 0;
    32.24 13.76 0;
    26.84 13.86 0;
    23.94 15.26 0;
    20.54 15.16 0;
    17.04 15.66 0;
    13.84 16.19 0.01;
    12.24 28.26 0;
    12.84 29.56 0;
    12.84 30.86 0;
    11.74 35.96 0;
    23.64 36.16 0;
    25.54 37.36 0;
    26.94 36.76 0;
    28.44 35.66 0;
    42.44 36.36 0;
    45.54 35.06 0;
    49.74 36.16 0;
    66.04 36.96 0;
    72.44 36.96 0;
    93.94 37.16 0;
    101.53 36.98 0.01;
    114.44 37.56 0];
speed = [46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46;46];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [42.46 1.17 0.01], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [28.57 14.76 0.01], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian1');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [10.48 1.69 0.01], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Pedestrian2');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.5, ...
    'Width', 0.9, ...
    'Height', 2.5, ...
    'Position', [18.96 -11.96 0.01], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Pedestrian3');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [37.37 11.66 0.01], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Pedestrian4');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [17.4 13.5 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Pedestrian5');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [37.22 -7.97 0.01], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Pedestrian6');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [62.2 -8.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian7');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [85 -11.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian8');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [111.8 -8.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Pedestrian9');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [115.8 23.1 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Pedestrian10');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [101 38.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Pedestrian11');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [67.5 34.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Pedestrian12');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [44.3 36.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Pedestrian13');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [25.1 33.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian14');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [10 29.1 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian15');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [97.6 65.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Pedestrian16');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [45.1 67.6 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Pedestrian17');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-9.2 64.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Pedestrian18');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-27.3 2.3 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Pedestrian19');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-27.5 -49.4 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Pedestrian20');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [22.6 -63.7 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Pedestrian21');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [78.8 -61.7 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian22');

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

